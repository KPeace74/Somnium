<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.dreaming = false
hsp = 0
vsp = 0
jumpspeed = global.playerJumpSpeed
movespeed = global.playerMoveSpeed
grav = global.gameGravity
frictionspeed = 0.4
accelerationspeed = movespeed/15
dir = "right"
jumps = 2
sprintSpeed = global.playerSprintSpeed
crouchSpeed = global.playerCrouchSpeed
state = playerStates.STANDING
dirN = 1
spriteSet = 0 //0 = Regular //1 = Kid //2 = Hospital
hp = 10
maxhp = 10
shooting = false
invinsibleTimer = false
alive = true
hitByEnemy = false
enemyHitting = noone

startTimer = false
time = 0

abilityTimerOne = 0
abilityTimerTwo = 0

abilityOneCooldown = 25
abilityTwoCooldown = 25

ninjaInvisible = false

d = false

infiniteJumps = false

coinCount = 0

//Test/Debug Variables

airTime = 0
airHeight = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invinsibleTimer = false
hitByEnemy = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ninjaInvisible = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.pause) {
    image_speed = 0
    exit
}

if (initializationDone) {
if (!instance_exists(oWizardOrb)) {
    instance_create(x, y, oWizardOrb)
}
if (!instance_exists(oNinjaStar)) {
    instance_create(x, y, oNinjaStar)
}

if (spriteSet == COWBOY_ID) {
    abilityOneCooldown = 25
}
key_left = keyboard_check(vk_left)
key_right = keyboard_check(vk_right)
if (spriteSet != HOSPITAL_ID &amp;&amp; !keyboard_check(vk_control)) {
    key_jump = keyboard_check_pressed(vk_up)
} else {
    key_jump = 0
}
if (key_jump &amp;&amp; place_meeting(x, y, oDoor)) {
    door = instance_nearest(x, y, oDoor)
    if (door.doorOnScreen) {
        door.image_index = 1
        changeRoomAndPos(0.01, instance_nearest(x, y, oDoor).tRoom, door.xPos, door.yPos)
        key_jump = 0
    }
}
if (global.sprintEnabled) {
    key_sprint = keyboard_check(vk_shift)
} else {
    key_sprint = 0
}
if (spriteSet != YOUNG_ID &amp;&amp; !keyboard_check(vk_control)) {
    key_crouch = keyboard_check(vk_down)
} else {
    key_crouch = 0
}
if (obj_items.drawInventory2) {
    key_examine = keyboard_check_pressed(ord("Q"))
} else {
    key_examine = 0
}
movespeed = global.playerMoveSpeed
accelerationspeed = movespeed/30
if (spriteSet == NINJA_ID) {
    jumpspeed = global.playerJumpSpeed + 3
} else {
    jumpspeed = global.playerJumpSpeed
}
grav = global.gameGravity
move = -key_left + key_right;
if (state == playerStates.WALKING || state == playerStates.RUNNING || state == playerStates.STANDING || state == playerStates.CROUCHING) {
    onGround = true
} else {
    onGround = false
}


if (onGround) {
    if (instance_position(x, y + (sprite_height/2) + 8, obj_solid) != noone) {
        frictionspeed = instance_position(x, y + (sprite_height/2) + 8, obj_solid).frictionspeed
    } else {
        frictionspeed = instance_nearest(x, y + (sprite_height/2) + 8, obj_solid).frictionspeed
    }
} else if (!onGround) {
    frictionspeed = airResistance
}
if (state == playerStates.WALKING || state == playerStates.RUNNING) {
    if (move == 0) {
        if (round(hsp) != 0) {
            hsp = hsp - (sign(hsp) * frictionspeed) //Friction
        } else {
            if !(abs(hsp) &gt;= abs(move * movespeed + (key_sprint * sprintSpeed * move))) {
                hsp += move * accelerationspeed
            } else {
                hsp = move * movespeed + (key_sprint * sprintSpeed * move);
            }
        }
    } else {
        if !(abs(hsp) &gt;= abs(move * movespeed + (key_sprint * sprintSpeed * move))) {
            hsp += move * accelerationspeed
        } else {
            hsp = move * movespeed + (key_sprint * sprintSpeed * move);
        }
    }
} else if (state == playerStates.CROUCHING) {
    if (move == 0) {
        if (round(hsp) != 0) {
            hsp = hsp - (sign(hsp) * frictionspeed)
        } else {
            hsp = move * crouchSpeed
        }
    } else {
        hsp = move * crouchSpeed
    }
} else if (state == playerStates.FALLING) {
    if (move == 0) {
        if (round(hsp) != 0) {
            hsp = hsp - (sign(hsp) * frictionspeed)
        } else {
            if !(abs(hsp) &gt;= abs(move * movespeed + (key_sprint * sprintSpeed * move))) {
                hsp += move * accelerationspeed
            } else {
                hsp = move * movespeed + (key_sprint * sprintSpeed * move);
            }
        }
    } else {
        if !(abs(hsp) &gt;= abs(move * movespeed + (key_sprint * sprintSpeed * move))) {
            hsp += move * accelerationspeed
        } else {
            hsp = move * movespeed + (key_sprint * sprintSpeed * move);
        }
    }
} else {
        if !(abs(hsp) &gt;= abs(move * movespeed + (key_sprint * sprintSpeed * move))) {
            hsp += move * accelerationspeed
        } else {
            hsp = move * movespeed + (key_sprint * sprintSpeed * move);
        }
}

if (global.roomChanging || global.inChat || global.inGUI || global.fallingAsleep) {
    global.movementDisabled = true
} else {
    global.movementDisabled = false
}

if (hitByEnemy) {
    if (!invinsibleTimer) {
        if (hp &gt; 0) {
            hp--
            invinsibleTimer = true
            alarm[2] = 15
            
            
        }
    }
}

if (hp &lt;= 0) {
    alive = false
} else {
    alive = true
}


if (startTimer) {
    time++
} else {
    time = 0
}

if (abilityTimerOne &gt; 0) {
    abilityTimerOne--
}
if (abilityTimerTwo &gt; 0) {
    abilityTimerTwo--
}


if (key_crouch &amp;&amp; state == playerStates.FALLING) {
    grav = global.gameGravity + 0.4
} else if (!key_crouch) {
    grav = global.gameGravity
}

if (instance_exists(oRevolver)) {
    shooting = true
} else {
    shooting = false
}

//Pushable Block
if (place_meeting(x + (move * movespeed), y, oBlockPushable)) {
    pushable = instance_position(x + hsp + (sprite_width/2), y + 16, oBlockPushable)
    if (pushable != noone) {
        debugPrint("Y")
        hsp = move * movespeed
        pushable.movespeed = movespeed
        pushable.move = sign(hsp)
        hsp = move * movespeed
    }
} else {
    if (instance_number(oBlockPushable) &gt;= 1) {
        oBlockPushable.movespeed = 0
        oBlockPushable.move = 0
    }
}

if (global.doubleJumpEnabled) {
    if (place_meeting(x, y + 1, obj_solid)) {
        jumps = 2
    }
    if (jumps == 2 &amp;&amp; !place_meeting(x, y + 1, obj_solid)) {
        jumps = 1
    }
    if (jumps == 1 &amp;&amp; keyboard_check_pressed(vk_up)) {
        jumps = 0
        vsp = -jumpspeed
    }
}

if (vsp &lt; 10) vsp += grav;

if (infiniteJumps) {
    if (keyboard_check_pressed(vk_up)) {
        vsp = key_jump * -jumpspeed
    }
}

if ((place_meeting(x, y + 1, obj_solid) || (!global.dreaming &amp;&amp; place_meeting(x, y + 1, oAwakeSolid))) &amp;&amp; !global.movementDisabled) {
    if (spriteSet != HOSPITAL_ID) {
        vsp = key_jump * -jumpspeed
    }
}

if (alarm[2] &gt; 5 &amp;&amp; alive) {
    hsp = 8 * sign(x - enemyHitting.x)
    vsp = -1
}

if (place_meeting(x, y + vsp, obj_solid)) { 

    while (!place_meeting(x, y + sign(vsp), obj_solid)) { 
        y += sign(vsp);
    }
    vsp = 0;
     
}

if (!global.dreaming &amp;&amp; place_meeting(x, y + vsp, oAwakeSolid)) {
    while (!place_meeting(x, y + sign(vsp), oAwakeSolid)) {
        y += sign(vsp)
    }
    vsp = 0
}

if (global.dreaming &amp;&amp; place_meeting(x, y + vsp, oDreamSolid)) {
    while (!place_meeting(x, y + sign(vsp), oDreamSolid)) {
        y += sign(vsp)
    }
    vsp = 0
}

y += vsp


if (place_meeting(x+hsp, y, obj_solid)) {

    while (!place_meeting(x+sign(hsp), y, obj_solid)) {
        x += sign(hsp);
    }
    hsp = 0;
    
}


if (!global.dreaming &amp;&amp; place_meeting(x + hsp, y, oAwakeSolid)) {

    while (!place_meeting(x + sign(hsp), y, oAwakeSolid)) {
        x += sign(hsp);
    }
    hsp = 0;
    
}

if (global.dreaming &amp;&amp; place_meeting(x + hsp, y, oDreamSolid)) {

    while (!place_meeting(x + sign(hsp), y, oDreamSolid)) {
        x += sign(hsp);
    }
    hsp = 0;
    
}

if (!global.movementDisabled) {
    x += hsp
}
if (!global.movementDisabled) {
if (key_right) {
    dir = "right"
    if (spriteSet == YOUNG_ID) {
        dirN = 2
    } else {
        dirN = 1
    }
} else if (key_left) {
    dir = "left"
    if (spriteSet == YOUNG_ID) {
        dirN = -2
    } else {
        dirN = -1
    }
}
}

if (((!global.dreaming &amp;&amp; place_meeting(x, y + 1, oAwakeSolid)) || place_meeting(x, y + 1, obj_solid)) &amp;&amp; hsp == 0 &amp;&amp; vsp == 0 &amp;&amp; !key_crouch) {
    if (state != playerStates.CROUCHING || (state == playerStates.CROUCHING &amp;&amp; !place_meeting(x, y - sprite_height, obj_solid))) {
        state = playerStates.STANDING
    }
} else if (place_meeting(x, y + 1, obj_solid) &amp;&amp; hsp != 0 &amp;&amp; vsp == 0 &amp;&amp; !key_sprint &amp;&amp; !key_crouch) {
    if (state != playerStates.CROUCHING || (state == playerStates.CROUCHING &amp;&amp; !place_meeting(x, y - sprite_height, obj_solid))) {
        state = playerStates.WALKING
    }
} else if (place_meeting(x, y + 1, obj_solid) &amp;&amp; hsp != 0 &amp;&amp; vsp == 0 &amp;&amp; key_sprint &amp;&amp; !key_crouch) {
    if (state != playerStates.CROUCHING || (state == playerStates.CROUCHING &amp;&amp; !place_meeting(x, y - sprite_height, obj_solid))) {
        state = playerStates.RUNNING
    }
} else if (vsp != 0 &amp;&amp; !place_meeting(x, y + 1, obj_solid)) {
    if (state != playerStates.CROUCHING || (state == playerStates.CROUCHING &amp;&amp; !place_meeting(x, y - sprite_height, obj_solid))) {
        state = playerStates.FALLING
    }
} else if (place_meeting(x, y + 1, obj_solid) &amp;&amp; key_crouch || (state == playerStates.CROUCHING &amp;&amp; place_meeting(x, y - sprite_height, obj_solid))) {
    if (spriteSet != YOUNG_ID) {
        state = playerStates.CROUCHING
    }
}

if (state == playerStates.STANDING) {
    image_speed = 2/30
    switch (spriteSet) {
        case ADULT_ID:
        sprite_index = spr_player_standing
        break;
        case YOUNG_ID:
        sprite_index = spr_player_standing_young
        break;
        case HOSPITAL_ID:
        sprite_index = spr_player_standing_hospital
        break;
        case COWBOY_ID:
        if (!shooting) {
            sprite_index = spr_cowboy_standing
        } else {
            sprite_index = spr_cowboy_standing_shooting
        }
        break;
        case ASTRONAUT_ID:
        sprite_index = spr_astronaut_standing
        break;
        case WIZARD_ID:
        sprite_index = spr_wizard_standing
        break;
        case NINJA_ID:
        sprite_index = spr_ninja_standing
        break;
    }
    image_xscale = dirN
} else if (state == playerStates.WALKING) {
    image_speed = hsp/45
    switch (spriteSet) {
        case ADULT_ID:
        sprite_index = spr_player_running
        break;
        case YOUNG_ID:
        sprite_index = spr_player_running_young
        break;
        case HOSPITAL_ID:
        sprite_index = spr_player_running_hospital
        break;
        case COWBOY_ID:
        sprite_index = spr_cowboy_running
        break;
        case ASTRONAUT_ID:
        sprite_index = spr_astronaut_running
        break;
        case WIZARD_ID:
        sprite_index = spr_wizard_running
        break;
        case NINJA_ID:
        sprite_index = spr_ninja_running
        break;
    }
    image_xscale = dirN
} else if (state == playerStates.RUNNING) {
    sprite_index = spr_player_running
    image_xscale = dirN
} else if (state == playerStates.CROUCHING) {
    if (hsp != 0) {
        image_speed = 3/30
        switch (spriteSet) {
            case ADULT_ID:
            sprite_index = spr_player_crouching_moving
            break;
            case COWBOY_ID:
            if (!shooting) {
                sprite_index = spr_cowboy_crouching_moving
            } else {
                sprite_index = spr_cowboy_crouching_moving_shooting
            }
            break;
            case ASTRONAUT_ID:
            sprite_index = spr_astronaut_crouching_moving
            break;
            case WIZARD_ID:
            sprite_index = spr_wizard_crouching_moving
            break;
            case NINJA_ID:
            sprite_index = spr_ninja_crouching_moving
            break;
        }
    } else {
        switch (spriteSet) {
            case ADULT_ID:
            sprite_index = spr_player_crouching_idle
            break;
            case COWBOY_ID:
            if (!shooting) {
                sprite_index = spr_cowboy_crouching_idle
            } else {
                sprite_index = spr_cowboy_crouching_idle_shooting
            }
            break;
            case ASTRONAUT_ID:
            sprite_index = spr_astronaut_crouching_idle
            break;
            case WIZARD_ID:
            sprite_index = spr_wizard_crouching_idle
            break;
            case NINJA_ID:
            sprite_index = spr_ninja_crouching_idle
            break;
        }
    }
    image_xscale = dirN
} else if (state == playerStates.FALLING) {
    switch (spriteSet) {
        case ADULT_ID:
        sprite_index = spr_player_falling
        break;
        case YOUNG_ID:
        sprite_index = spr_player_falling_young
        break;
        case HOSPITAL_ID:
        debugPrint("Hospital Falling Sprite Here")
        break;
        case COWBOY_ID:
        sprite_index = spr_cowboy_falling
        break;
        case ASTRONAUT_ID:
        sprite_index = spr_astronaut_falling
        break;
        case WIZARD_ID:
        sprite_index = spr_wizard_falling
        break;
        case NINJA_ID:
        sprite_index = spr_ninja_falling
        break;
    }
    image_xscale = dirN
}

if (global.movementDisabled) {
    image_speed = 1/15
    switch (spriteSet) {
        case ADULT_ID:
        sprite_index = spr_player_standing
        break;
        case YOUNG_ID:
        sprite_index = spr_player_standing_young
        break;
        case HOSPITAL_ID:
        sprite_index = spr_player_standing_hospital
        break;
        case COWBOY_ID:
        sprite_index = spr_cowboy_standing
        break;
        case ASTRONAUT_ID:
        sprite_index = spr_astronaut_standing
        break;
        case WIZARD_ID:
        sprite_index = spr_wizard_standing
        break;
        case NINJA_ID:
        sprite_index = spr_ninja_standing
        break;
    }
}


//Debugging/Testing Code
/*NOTES*\
*At 0.4 gravity and 7 jumpspeed the player has 36 frames of air time
*At 0.4 gravity and 7 jumpspeed the player jumps 64.8 pixels high
*At 0.4 gravity and 6 jumpspeed the player jumps 48 pixels high
*At 0.4 gravity and 5 jumpspeed the player jumps 33.8 pixels high
|Gravity|Jumpspeed|Height|Frames|
|  0.4  |    7    | 64.8 |  36  |
|  0.4  |    6    | 48.0 |  31  |
|  0.4  |    5    | 33.8 |  26  |
|  0.4  |    4    | 22.0 |  21  |
|  0.4  |    3    | 12.8 |  16  |
|  0.4  |    2    | 06.0 |  11  |
|  0.4  |    1    | 01.8 |  06  |
\*     */
if (state == playerStates.FALLING) {
    airTime++
    debugPrint("Height: " + string(airHeight - y))
    debugPrint("Time: " + string(airTime))
} else {
    airHeight = y
    airTime = 0
}
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Key Presses

/***********\
 *  SPACE  * 
\***********/
if (keyboard_check_pressed(vk_space)) {
    if (global.gameGravity == 0.1) {
        global.gameGravity = 0.4
    } else {
        global.gameGravity = 0.1
    }
}

/************\
 *  INSERT  * 
\************/
if (keyboard_check_pressed(vk_insert)) {
    screen_save(working_directory + "\Screenshots\Screensaver.png")
}

/***********\
 *    A    * 
\***********/
if (keyboard_check_pressed(ord("A"))) {
    infiniteJumps = !infiniteJumps
}

/***********\
 *    B    * 
\***********/
if (keyboard_check_pressed(ord("B"))) {
    if (window_get_fullscreen()) {
        window_set_fullscreen(false)
        window_set_size(display_get_width(), display_get_height())
    } else if (!window_get_fullscreen()) {
        window_set_fullscreen(true)
    }
}

/***********\
 *    C    * 
\***********/
if (keyboard_check_pressed(ord("C"))) {
    if (abilityTimerTwo == 0) {
        switch (spriteSet) {
            case COWBOY_ID:
            abilityTwoCooldown = 25
            //instance_create(x, y, oRevolver)
            abilityTimerTwo = abilityTwoCooldown
            break;
            case ASTRONAUT_ID:
            abilityTwoCooldown = 20
            abilityTimerTwo = abilityTwoCooldown
            break;
            case WIZARD_ID:
            abilityTwoCooldown = 1200
            abilityTimerTwo = abilityTwoCooldown
            break;
            case NINJA_ID:
            abilityTwoCooldown = 1200
            abilityTimerTwo = abilityTwoCooldown
            ninjaInvisible = true
            alarm[1] = 300
            break;
        }
    }
}

/***********\
 *    D    * 
\***********/
if (keyboard_check_pressed(ord("D"))) {
    fallAsleepWakeUp(0.01)
}

/***********\
 *    N    * 
\***********/
if (keyboard_check_pressed(ord("N"))) {
    global.playerMoveSpeed--
}

/***********\
 *    M    * 
\***********/
if (keyboard_check_pressed(ord("M"))) {
    global.playerMoveSpeed++
}

/***********\
 *    L    * 
\***********/
if (keyboard_check_pressed(ord("L"))) {
    global.playerMoveSpeed = basePlayerMoveSpeed
}

/***********\
 *    R    * 
\***********/
if (keyboard_check_pressed(ord("R"))) {
    game_restart()
}

/***********\
 *    V    * 
\***********/
if (keyboard_check_pressed(ord("V"))) {
    global.characterSelection++
    spriteSet = global.characterSelection + 3
    
    if (spriteSet == ASTRONAUT_ID) {
        global.gameGravity = 0.2
    } else {
        global.gameGravity = 0.4
    }
}

/***********\
 *    X    * 
\***********/
if (keyboard_check_pressed(ord("X"))) {
    if (abilityTimerOne == 0 &amp;&amp; !shooting) {
        switch (spriteSet) {
            case COWBOY_ID:
            abilityOneCooldown = 25
            instance_create(x, y, oRevolver)
            abilityTimerOne = abilityOneCooldown
            break;
            case ASTRONAUT_ID:
            abilityOneCooldown = 20
            abilityTimerOne = abilityOneCooldown
            break;
            case WIZARD_ID:
            abilityOneCooldown = 45
            abilityTimerOne = abilityOneCooldown
            wizardInvisible = false
            with (instance_nearest(x, y, oWizardOrb)) {
                shoot = true
            }
            break;
            case NINJA_ID:
            abilityOneCooldown = 20
            abilityTimerOne = abilityOneCooldown
            with (instance_nearest(x, y, oNinjaStar)) {
                shoot = true
            }
            ninjaInvisible = false
            break;
        }
    }
    
    if (startTimer) {
        //debugPrint(time)
    }
    
    startTimer = !startTimer
}

/***********\
 *    Z    * 
\***********/
if (keyboard_check_pressed(ord("Z"))) {
    switch (room) {
    case rmLevelTest:
    changeRoom(0.05, rmLevelMomsHouse)
    break;
    case rmLevelMomsHouse:
    changeRoom(0.05, rmLevelDream)
    break;
    case rmLevelDream:
    changeRoom(0.05, rmLevelNightTest)
    break;
    case rmLevelNightTest:
    changeRoom(0.05, rmLevelTest)
    break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oDoor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!other.doorOnScreen) {
    changeRoomAndPos(0.01, instance_nearest(x, y, oDoor).tRoom, other.xPos, other.yPos)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rmLevelMomsHouse) {
    spriteSet = YOUNG_ID
    dirN = 2
    image_yscale = 2
    dreaming = false
    global.gameGravity = 0.4
} else if (string_count("Hospital", room_get_name(room)) &gt;= 1) {
    dirN = 1
    image_yscale = 1
    spriteSet = HOSPITAL_ID
    dreaming = false
    global.gameGravity = 0.4
} else {
    dirN = 1
    image_yscale = 1
    if (string_count("Dream", room_get_name(room)) &gt;= 1) {
        dreaming = true
        spriteSet = global.characterSelection + 3
        
        if (spriteSet == ASTRONAUT_ID) {
            global.gameGravity = 0.2
        } else if (spriteSet == WIZARD_ID) {
        }
    } else {
        spriteSet = ADULT_ID
        dreaming = false
        global.gameGravity = 0.4
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.pause) {
    exit
}
draw_set_alpha(1)
draw_background_part_ext(bgHealth, 0, (10 - hp) * 11, 59, 10, 20, 20, 5, 5, -1, 1)
draw_sprite_ext(sprCoin, instance_nearest(0, 0, oCoin).image_index, 29, 100, 2, 2, 0, c_white, 1)
draw_set_color(c_white)
draw_set_font(fnt_coders_crux)
draw_set_halign(fa_left)
draw_text_shadowed(60, 90, "x " + string(coinCount), 2, c_white, c_black)
draw_set_halign(fa_center)
draw_text_shadowed(view_wview/2, 20, "Goal: " + global.goals[global.currentGoal, 0], 2, c_white, c_black)

draw_set_valign(fa_top)

if (!global.roomChanging &amp;&amp; string_count("Dream", room_get_name(room)) &gt;= 1) {
    draw_background_part(bgAbilities, 1 + (65 * global.characterSelection), 1, 64, 64, view_wview - 181, 25)
    draw_background_part(bgAbilities, 1 + (65 * global.characterSelection), 66, 64, 64, view_wview - 89, 25)
    draw_set_alpha(0.5)
    draw_set_color(c_black)
    if (abilityTimerOne &gt; 0) {
        draw_rectangle(view_wview - 178, 86 - (58* (abilityTimerOne/abilityOneCooldown)), view_wview - 120, 86, false)
    }
    if (abilityTimerTwo &gt; 0) {
        draw_rectangle(view_wview - 86, 86 - (58* (abilityTimerTwo/abilityTwoCooldown)), view_wview - 28, 86, false)
    }
}

draw_set_alpha(1)

if (d) {
draw_sprite(sprScrap, 0, view_wview/2, view_hview/2)
draw_set_color(c_tan)
draw_set_font(fnt_first_order)
draw_text(view_wview/2, view_hview/2, "Testing")
}

if (DEBUG_MODE) {
    draw_set_font(fnt_coders_crux)
    draw_set_color(c_white)
    draw_set_halign(fa_left)
    draw_text(20, view_hview - 150, "HSP: " + string(hsp))
    draw_text(20, view_hview - 120, "VSP: " + string(vsp))
    draw_text(20, view_hview - 90, "FPS: " + string(fps))
    draw_text(20, view_hview - 60, "Dreaming: " + string(global.dreaming))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ninjaInvisible) {
    draw_set_alpha(0.3)
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_black, 0.3)
} else {    
    draw_set_alpha(1)
    if (!invinsibleTimer) {
        draw_self()
    } else {
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_red, 1)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//d = !d
/*global.dreaming = !global.dreaming
if (global.dreaming) {
    global.playerJumpSpeed = 7
    global.playerMoveSpeed = 7
    global.playerSprintSpeed = 4
    global.playerCrouchSpeed = 4
    global.gameGravity = 0.2
    jumpspeed = global.playerJumpSpeed
    movespeed = global.playerMoveSpeed
    sprintSpeed = global.playerSprintSpeed
    crouchSpeed = global.playerCrouchSpeed
    grav = global.gameGravity
} else {
    global.playerJumpSpeed = 6
    global.playerMoveSpeed = 6
    global.playerSprintSpeed = 3
    global.playerCrouchSpeed = 3
    global.gameGravity = 0.4
    jumpspeed = global.playerJumpSpeed
    movespeed = global.playerMoveSpeed
    sprintSpeed = global.playerSprintSpeed
    crouchSpeed = global.playerCrouchSpeed
    grav = global.gameGravity
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
