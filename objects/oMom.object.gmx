<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mom_standing</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oNPC</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = global.gameGravity
vsp = 0
hsp = 0
image_speed = 1/35
closeTo = false
xPos = x
yPos = y
personTalking = "Mom"
name = "Mom"
chatTip = false
chatSequences[0] = 0
chatSequences[1] = 1
drawCSS = false
subCSS = 0
CSSButtons = false
cssNumber = 0
move = 0
movespeed = 0

chatSequence = chatSequences[0]
chatNumber = 1
cssSprite = sprCSS
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.pause) {
image_speed = 0
exit
}

gravityScript(0.4)
collision(obj_solid)

if (distance_to_object(obj_player) &lt;= 32) {
    closeTo = true
} else {
    closeTo = false
}

if (global.pause) {
    image_speed = 0
} else {
    image_speed = 1/35
}

if (keyboard_check_pressed(ord("E")) &amp;&amp; closeTo &amp;&amp; !global.inChat) {
    global.goals[0, 1] = 1
    global.inChat = true
}


if (keyboard_check_pressed(ord("E")) &amp;&amp; global.inChat) {
    if (!global.inGUI) {
        if (global.chatText[chatSequence, chatNumber + 2] != "") {
            chatNumber++
        } else {
            global.inChat = false
            chatNumber = 0
            xPos = x
            yPos = y
        }
    }
}

if (chatNumber % 2 != 0) {
    if (global.chatText[chatSequence, chatNumber] != obj_player) {
        xPos = instance_nearest(0, 0, global.chatText[chatSequence, chatNumber]).x
        yPos = instance_nearest(0, 0, global.chatText[chatSequence, chatNumber]).y
        personTalking = instance_nearest(0, 0, global.chatText[chatSequence, chatNumber]).name
    } else if (global.chatText[chatSequence, chatNumber] == obj_player) {
        xPos = instance_nearest(x, y, obj_player).x
        yPos = instance_nearest(x, y, obj_player).y
        personTalking = "You"
    }
    chatNumber++
}

if (object_exists(obj_player)) {
    if (obj_player.x &gt; x) {
        image_xscale = 4
    } else {
        image_xscale = -4
    }
}
//Do things at certain parts in chat

if (chatSequence == 0 &amp;&amp; chatNumber == 6) {
    chatTip = true
}

if (chatSequence == 0 &amp;&amp; chatNumber == 16) {
    global.inGUI = true
    drawCSS = true
}

if (chatSequence == 1 &amp;&amp; chatNumber == 8) {
    global.currentGoal = 1
} else if (chatSequence == 2 &amp;&amp; chatNumber == 6) {
    global.currentGoal = 1
} else if (chatSequence == 3 &amp;&amp; chatNumber == 12) {
    global.currentGoal = 1
} else if (chatSequence == 4 &amp;&amp; chatNumber == 10) {
    global.currentGoal = 1
}

if (!CSSButtons &amp;&amp; drawCSS) {
    debugPrint(string(cssNumber))
    if (cssNumber == 0) {
    buttonOne = instance_create(view_xview + view_wview/2 - 125, view_yview + view_hview/2 - 130, oCSSButton)
    with (buttonOne) {
        button = 1
    }
    buttonTwo = instance_create(view_xview + view_wview/2 - 77, view_yview + view_hview/2 + 17, oCSSButton)
    with (buttonTwo) {
        button = 2
    }
    buttonThree = instance_create(view_xview + view_wview/2 - 126, view_yview + view_hview/2 + 198, oCSSButton)
    with (buttonThree) {
        button = 3
    }
    } else {
    buttonFour = instance_create(view_xview + view_wview/2 - 125, view_yview + view_hview/2 - 130, oCSSButton)
    with (buttonFour) {
        button = 4
    }
    debugPrint("Button Four")
    }
    if (!instance_exists(oCSSBackButton)) {
        instance_create(x, y, oCSSBackButton)
    }
    CSSButtons = true
}

if (cssNumber == 0) {
    cssSprite = sprCSS
} else {
    cssSprite = sprCSS2
}

if (mouse_check_button_pressed(mb_left)) {
    if (subCSS != 0) {  
        if (cssNumber == 0) {
            global.characterSelection = subCSS - 1
        } else {
            global.characterSelection = subCSS - 1 + 3
        }
        global.inGUI = false
        drawCSS = false
        if (subCSS == 1) {
            if (cssNumber == 0) {
            chatSequence = 1
            chatNumber = 0
            } else {
            chatSequence = 4
            chatNumber = 0
            }
        } else if (subCSS == 2) {
            chatSequence = 2
            chatNumber = 0
        } else if (subCSS == 3) {
            chatSequence = 3
            chatNumber = 0
        } else if (subCSS == 4) {
            chatSequence = 4
            chatNumber = 0
        }
    }
    
}
//debugPrint(string(ceil((string_width(global.chatText[chatSequence, chatNumber]))/475)))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (chatSequence == 0 &amp;&amp; chatNumber == 4 &amp;&amp; !chatTip) {
    draw_sprite(sprChatInstructions, 0, view_wview/2, 200)
}

if (drawCSS) {
    draw_sprite(cssSprite, subCSS, view_wview/2, view_hview/2)
    draw_sprite_ext(sprCSSBackButton, oCSSBackButton.image_index, oCSSBackButton.x - view_xview, oCSSBackButton.y - view_yview, 1 - (2 * cssNumber), 1, 0, c_white, 1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
if (closeTo &amp;&amp; !global.inChat) {
    draw_set_alpha(1)
    draw_set_font(fnt_old)
    draw_set_color(c_black)
    draw_roundrect((x - (string_width("Press SPACE to Talk")/4) + 8) - 3, (y - 125), (x + (string_width("Press SPACE to Talk")/4) - 8) + 3, (y - 89), false)
    draw_set_color(c_white)
    draw_roundrect((x - (string_width("Press SPACE to Talk")/4) + 8), (y - 122), (x + (string_width("Press SPACE to Talk")/4) - 8), (y - 92), false)
    draw_set_color(c_black)
    draw_set_alpha(1)
    draw_set_halign(fa_center)
    draw_text_transformed(x, y - 120, "Press E to Talk", 1/2, 1/2, 0)
}

if (global.inChat) {
    draw_set_color(c_white)
    draw_set_alpha(1)
    draw_set_font(fnt_old)
    draw_set_halign(fa_center)
    draw_set_color(c_black)
    if ((ceil((string_width(global.chatText[chatSequence, chatNumber]))/490)) &gt; 1) {
        draw_roundrect(xPos - 125 - 3, yPos - 95 - (ceil((string_width(global.chatText[chatSequence, chatNumber]))/490) * 25) - 3, xPos + 125 + 3, (yPos - 89), false)
    } else {
        draw_roundrect((xPos - (string_width(global.chatText[chatSequence, chatNumber])/4) - 8) - 3, yPos - 95 - (ceil((string_width(global.chatText[chatSequence, chatNumber]))/490) * 25) - 3, (xPos + (string_width(global.chatText[chatSequence, chatNumber])/4) + 8) + 3, (yPos - 89), false)
    }
    //Drawing the Rectangle Around the Person Talking's Name
    draw_roundrect(xPos - (string_width(personTalking)*0.35/2) - 13, yPos - 95 - (ceil((string_width(global.chatText[chatSequence, chatNumber]))/490) * 25), xPos + (string_width(personTalking)*0.35/2) + 13, yPos - 95 - (ceil((string_width(global.chatText[chatSequence, chatNumber]))/490) * 25) - 20, false)
    draw_set_color(c_white)
    if ((ceil((string_width(global.chatText[chatSequence, chatNumber]))/490)) &gt; 1) {
        draw_roundrect(xPos - 125, yPos - 95 - (ceil((string_width(global.chatText[chatSequence, chatNumber]))/490) * 25), xPos + 125, (yPos - 92), false)
    } else {
        draw_roundrect((xPos - (string_width(global.chatText[chatSequence, chatNumber])/4) - 8), yPos - 95 - (ceil((string_width(global.chatText[chatSequence, chatNumber]))/490) * 25), (xPos + (string_width(global.chatText[chatSequence, chatNumber])/4) + 8), (yPos - 92), false)
    }
    //Drawing the Rectangle Around the Person Talking's Name
    draw_roundrect(xPos - (string_width(personTalking)*0.35/2) - 10, yPos - 95 - (ceil((string_width(global.chatText[chatSequence, chatNumber]))/490) * 25) - 3, xPos + (string_width(personTalking)*0.35/2) + 10, yPos - 95 - (ceil((string_width(global.chatText[chatSequence, chatNumber]))/490) * 25) - 17, false)
    draw_set_colour(c_black)
    draw_set_alpha(1)
    
    draw_text_transformed(xPos, yPos - 95 - (ceil((string_width(global.chatText[chatSequence, chatNumber]))/490) * 25) - 19, personTalking, 0.35, 0.35, 0)
    draw_text_ext_transformed(xPos, yPos - 95 - (ceil((string_width(global.chatText[chatSequence, chatNumber]))/490) * 25), global.chatText[chatSequence, chatNumber], 50, 490, 1/2, 1/2, 0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
